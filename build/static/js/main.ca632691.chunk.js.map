{"version":3,"sources":["images/autumn-3846345_1920.jpg","images/dawn-3846778_1920.jpg","images/lichterkette-3834926_1920.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","images","image_1","image_2","image_3","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","index","length","setState","_this2","react_default","a","createElement","className","map","item","i","concat","key","src","alt","onClick","_goPrev","_goNext","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uSCUpCC,SAAS,CAACC,IAAUC,IAAUC,MA6DnBC,cAxDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAQ,GAHMR,yEAMT,IACFQ,EAASL,KAAKI,MAAdC,MACFA,IAAUd,EAAOe,OAAS,EAC3BD,EAAQ,EAERA,IAEFL,KAAKO,SAAS,CACZF,MAAQA,sCAGH,IACFA,EAAUL,KAAKI,MAAfC,MACQ,IAAVA,EACDA,EAAQd,EAAOe,OAAS,EAExBD,IAEFL,KAAKO,SAAS,CACZF,MAAQA,qCAGH,IAAAG,EAAAR,KACDK,EAAUL,KAAKI,MAAfC,MACN,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAIVrB,EAAOsB,IAAI,SAACC,EAAMC,GAAP,OACTN,EAAAC,EAAAC,cAAA,MAAIC,UAAS,QAAAI,OAAUX,IAAUU,EAAI,SAAW,IAAME,IAAKF,GAAGN,EAAAC,EAAAC,cAAA,OAAKO,IAAKJ,EAAMK,IAAI,SAKxFV,EAAAC,EAAAC,cAAA,UACEC,UAAU,WACVQ,QAAS,kBAAIZ,EAAKa,YAFpB,IAGG,IAHH,KAIAZ,EAAAC,EAAAC,cAAA,UACEC,UAAU,YACVQ,QAAS,kBAAIZ,EAAKc,YAFpB,eA/CUC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca632691.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/autumn-3846345_1920.4a960b66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dawn-3846778_1920.1f4d22f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lichterkette-3834926_1920.9e247ff7.jpg\";","import React, { Component } from 'react';\n\n// 1. 怎么去引入图片？\nimport image_1 from './images/autumn-3846345_1920.jpg'\nimport image_2 from './images/dawn-3846778_1920.jpg'\nimport image_3 from './images/lichterkette-3834926_1920.jpg'\n\n// link => import\nimport './demo.css'\n\nvar images = [image_1 , image_2 , image_3]\n\n// react 相似的内容 map 数组\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      index : 1 // active类名\n    }\n  }\n  _goNext(){\n    var {index} = this.state\n    if(index === images.length - 1){\n      index = 0\n    } else {\n      index ++\n    }\n    this.setState({\n      index : index\n    })\n  }\n  _goPrev(){\n    var {index } = this.state\n    if(index === 0){\n      index = images.length - 1\n    } else {\n      index --\n    }\n    this.setState({\n      index : index\n    })\n  }\n  render() {\n    var { index } = this.state\n    return (\n      <div className='wrap'>\n        <ul className='list'>\n          {\n            // 1. map  key diff _id\n            // 2. 括号\n            images.map((item ,i)=>(\n              <li className={`item ${index === i ? 'active' : ''}`} key={i}><img src={item} alt=\"\"/></li>\n            ))\n          }\n        </ul>\n        {/* jsx < 一个标签的开始 */}\n        <button \n          className=\"btn left\"\n          onClick={()=>this._goPrev()}\n        > {'<'} </button>\n        <button \n          className=\"btn right\"\n          onClick={()=>this._goNext()}\n        > > </button>\n        {/* 打包编译 */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}